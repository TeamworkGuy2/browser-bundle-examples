{
  "version": 3,
  "sources": [
    "../ts-bundlify/bundlers/browser/_prelude.js",
    "src/example-code/power-grid/PowerGrid.js",
    "src/example-code/power-grid/PowerGridWidget.js",
    "src/example-code/power-grid/PowerGridWidgetHelper.js",
    "src/example-code/power-grid/PowerRelay.js"
  ],
  "names": [],
  "mappingshFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACj
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "/* TypeScript static helpers - inserted once, here.  Run TypeScript compiler with '--noEmitHelpers' option to prevent duplicate helpers being inserted into each bundled TypeScript file */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments)).next());\n    });\n};\n\nvar require = (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\"use strict\";\r\nvar PowerRelay = require(\"./PowerRelay\");\r\nvar Junction = PowerRelay.Junction;\r\nvar Relay = PowerRelay.Relay;\r\nvar PowerGrid = (function () {\r\n    function PowerGrid() {\r\n    }\r\n    PowerGrid.prototype.createPowerGrid = function (map) {\r\n        var diagramParts = PowerRelay.diagramToJunctionRelays(0, map);\r\n        this.junctions = diagramParts.junctions;\r\n        this.relays = diagramParts.relays;\r\n        this.junctionCache = Junction.toMap(diagramParts.junctions);\r\n        this.relayCache = Relay.toMap(diagramParts.relays);\r\n        return diagramParts.size;\r\n    };\r\n    PowerGrid.prototype.createJunctionsGrid = function (map) {\r\n        var jncs = map.reduce(function (m, ln, z) {\r\n            ln.split(\"\").forEach(function (s, x) {\r\n                if (s === \"+\") {\r\n                    var jnc = { junctionId: null, location: { x: x, y: 0, z: z } };\r\n                    jnc.junctionId = PowerRelay.Junction.getJunctionId(jnc);\r\n                    m.push(jnc);\r\n                }\r\n            });\r\n            return m;\r\n        }, []);\r\n        this.junctions = jncs;\r\n        this.junctionCache = Junction.toMap(jncs);\r\n        return {\r\n            width: map[0].length,\r\n            height: map.length,\r\n        };\r\n    };\r\n    PowerGrid.prototype.getJunction = function (id) {\r\n        return this.junctionCache[id];\r\n    };\r\n    PowerGrid.prototype.getRelay = function (id) {\r\n        return this.relayCache[id];\r\n    };\r\n    return PowerGrid;\r\n}());\r\nPowerGrid.maps = {\r\n    defaultMap1: [\r\n        \"                                                                                \",\r\n        \"                                                                                \",\r\n        \"        +                                        +                         +    \",\r\n        \"       /                                         |                        /     \",\r\n        \"      /                 +--------+---------------+                       +      \",\r\n        \"     |                 /         |               |                       |      \",\r\n        \"     +                +          |               +-----------+-----------+      \",\r\n        \"     |                           |                                       |      \",\r\n        \"     +---------------------------+                                       |      \",\r\n        \"                                             +--\\\\                        |      \",\r\n        \"                                                 +-----------------------+      \",\r\n        \"                       +-------------------------+                              \",\r\n        \"                      /                          |                              \",\r\n        \"                     +                           +                              \",\r\n        \"                                                                                \",\r\n        \"                                                                                \",\r\n    ],\r\n    hds: [\r\n        \"                                                                                \",\r\n        \"                                                                                \",\r\n        \"    +       +      +  +  +           + + + + +                                  \",\r\n        \"                                                                                \",\r\n        \"    +       +      +       +       +                                            \",\r\n        \"                                                                                \",\r\n        \"    +       +      +         +     +                                            \",\r\n        \"                                                                                \",\r\n        \"    + + + + +      +         +       + + + +                                    \",\r\n        \"                                                                                \",\r\n        \"    +       +      +         +               +                                  \",\r\n        \"                                                                                \",\r\n        \"    +       +      +       +                 +                                  \",\r\n        \"                                                                                \",\r\n        \"    +       +      +  +  +         + + + + +                                    \",\r\n        \"                                                                                \",\r\n    ],\r\n};\r\nmodule.exports = PowerGrid;\r\n",
    "\"use strict\";\r\nvar PowerGridWidgetHelper = require(\"./PowerGridWidgetHelper\");\r\nvar PowerGridWidget;\r\n(function (PowerGridWidget) {\r\n    var dotColor = \"#C44\";\r\n    function addSvgMap(doc, container, grid, gs) {\r\n        var junctions = grid.junctions || [];\r\n        var relays = grid.relays || [];\r\n        for (var i = 0, size = junctions.length; i < size; i++) {\r\n            var junctionElem = createJunctionUi(doc, junctions[i].location, grid, gs);\r\n            container.appendChild(junctionElem);\r\n        }\r\n        for (var i = 0, size = relays.length; i < size; i++) {\r\n            var relayElem = createRelayUi(doc, relays[i], grid, gs);\r\n            container.appendChild(relayElem);\r\n        }\r\n    }\r\n    PowerGridWidget.addSvgMap = addSvgMap;\r\n    function createJunctionUi(doc, point, pg, gs) {\r\n        var x = gs.xSize * (point.x + 0.5);\r\n        var z = gs.zSize * (point.z + 0.5);\r\n        var elem = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n        elem.setAttributeNS(null, \"r\", 4 + '');\r\n        elem.setAttributeNS(null, \"stroke\", \"#555\");\r\n        elem.setAttributeNS(null, \"stroke-width\", 2 + '');\r\n        elem.setAttributeNS(null, \"fill\", dotColor);\r\n        elem.setAttributeNS(null, \"cx\", x + '');\r\n        elem.setAttributeNS(null, \"cy\", z + '');\r\n        return elem;\r\n    }\r\n    PowerGridWidget.createJunctionUi = createJunctionUi;\r\n    function createRelayUi(doc, relay, pg, gs) {\r\n        var pointsAttr = PowerGridWidgetHelper.relayToSvgPointsAttr(relay, pg, gs);\r\n        var elem = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\r\n        elem.setAttributeNS(null, \"stroke\", \"#555\");\r\n        elem.setAttributeNS(null, \"fill\", \"none\");\r\n        elem.setAttributeNS(null, \"stroke-width\", 2 + '');\r\n        elem.setAttributeNS(null, \"points\", pointsAttr);\r\n        return elem;\r\n    }\r\n    PowerGridWidget.createRelayUi = createRelayUi;\r\n})(PowerGridWidget || (PowerGridWidget = {}));\r\n// main - entry point\r\n(function main() {\r\n    var doc = window.document;\r\n    PowerGridWidgetHelper.onReady(doc, function () {\r\n        var gridUi = PowerGridWidgetHelper.newInst(doc, doc.getElementsByClassName(\"power-grid-widget\")[0], { mapName: \"defaultMap1\" }, PowerGridWidget.addSvgMap);\r\n    });\r\n}());\r\nmodule.exports = PowerGridWidget;\r\n",
    "\"use strict\";\r\nvar PowerGrid = require(\"./PowerGrid\");\r\nvar PowerGridWidgetHelper;\r\n(function (PowerGridWidgetHelper) {\r\n    function newInst(doc, container, settings, buildSvgFunc) {\r\n        var map = PowerGrid.maps[settings.mapName];\r\n        var grid = new PowerGrid();\r\n        var size = grid.createPowerGrid(map);\r\n        //var size = grid.createJunctionsGrid(map);\r\n        var gs = {\r\n            xCount: size.width,\r\n            zCount: size.height,\r\n            xSize: 10,\r\n            zSize: 10,\r\n        };\r\n        //addSvgMap(doc, container, grid.relays, grid.junctions, gs);\r\n        var svgContainer = container.getElementsByClassName(\"map-display\")[0];\r\n        buildSvgFunc(doc, svgContainer, grid, gs);\r\n    }\r\n    PowerGridWidgetHelper.newInst = newInst;\r\n    function relayToSvgPointsAttr(relay, pg, gs) {\r\n        var pointToPx = function (p) { return (gs.xSize * (p.x + 0.5)) + ',' + (gs.zSize * (p.z + 0.5)); };\r\n        var points = relay.path.map(pointToPx);\r\n        var srcJnc = pg.getJunction(relay.srcJunctionId);\r\n        points.unshift(pointToPx(srcJnc.location));\r\n        var dstJnc = pg.getJunction(relay.dstJunctionId);\r\n        points.push(pointToPx(dstJnc.location));\r\n        return points.join(\" \");\r\n    }\r\n    PowerGridWidgetHelper.relayToSvgPointsAttr = relayToSvgPointsAttr;\r\n    function onReady(document, func) {\r\n        if (typeof document === \"function\") {\r\n            func = document;\r\n            document = undefined;\r\n        }\r\n        var doc = document || window.document;\r\n        function ready(func) {\r\n            if (doc.readyState !== \"loading\") {\r\n                func();\r\n            }\r\n            else {\r\n                doc.addEventListener(\"DOMContentLoaded\", func);\r\n            }\r\n        }\r\n        ready(func);\r\n    }\r\n    PowerGridWidgetHelper.onReady = onReady;\r\n})(PowerGridWidgetHelper || (PowerGridWidgetHelper = {}));\r\nmodule.exports = PowerGridWidgetHelper;\r\n",
    "\"use strict\";\r\nvar assert = require(\"assert\");\r\nvar ForEachUtil = require(\"../ForEachUtil\");\r\nvar PowerRelay;\r\n(function (PowerRelay) {\r\n    var PowerRating;\r\n    (function (PowerRating) {\r\n        function getPowerRating() { return { maxPower: 271, safeOperatePower: 139, standbyPower: 43 }; }\r\n        PowerRating.getPowerRating = getPowerRating;\r\n    })(PowerRating = PowerRelay.PowerRating || (PowerRelay.PowerRating = {}));\r\n    var Pwr;\r\n    (function (Pwr) {\r\n        function fromElectric(volts, amps) { return (volts * amps); }\r\n        Pwr.fromElectric = fromElectric;\r\n    })(Pwr = PowerRelay.Pwr || (PowerRelay.Pwr = {}));\r\n    var JunctionId;\r\n    (function (JunctionId) {\r\n        function fromDb(id) { return id; }\r\n        JunctionId.fromDb = fromDb;\r\n    })(JunctionId = PowerRelay.JunctionId || (PowerRelay.JunctionId = {}));\r\n    var RelayId;\r\n    (function (RelayId) {\r\n        function fromDb(id) { return id; }\r\n        RelayId.fromDb = fromDb;\r\n    })(RelayId = PowerRelay.RelayId || (PowerRelay.RelayId = {}));\r\n    var Junction;\r\n    (function (Junction) {\r\n        function toMap(jns) {\r\n            return jns.reduce(function (r, n) {\r\n                var id = getJunctionId(n);\r\n                r[id] = {\r\n                    junctionId: JunctionId.fromDb(id),\r\n                    location: n.location,\r\n                };\r\n                return r;\r\n            }, {});\r\n        }\r\n        Junction.toMap = toMap;\r\n        function getJunctionId(jnc) {\r\n            return (\"Junction{\" + jnc.location.x + \",\" + jnc.location.y + \",\" + jnc.location.z + \"}\");\r\n        }\r\n        Junction.getJunctionId = getJunctionId;\r\n    })(Junction = PowerRelay.Junction || (PowerRelay.Junction = {}));\r\n    var Relay;\r\n    (function (Relay) {\r\n        function toMap(rls) {\r\n            return rls.reduce(function (r, n) {\r\n                var id = getRelayId(n);\r\n                r[id] = {\r\n                    relayId: RelayId.fromDb(id),\r\n                    powerRating: n.powerRating,\r\n                    path: n.path,\r\n                    srcJunctionId: JunctionId.fromDb(n.srcJunctionId),\r\n                    dstJunctionId: JunctionId.fromDb(n.dstJunctionId),\r\n                };\r\n                return r;\r\n            }, {});\r\n        }\r\n        Relay.toMap = toMap;\r\n        function getRelayId(rly) {\r\n            return (\"Relay{\" + rly.srcJunctionId + \"-to-\" + rly.dstJunctionId + \"}\");\r\n        }\r\n        Relay.getRelayId = getRelayId;\r\n    })(Relay = PowerRelay.Relay || (PowerRelay.Relay = {}));\r\n    // map/board loading logic\r\n    function shortestRelay(relays) {\r\n        var min;\r\n        var minDistance = Number.MAX_SAFE_INTEGER;\r\n        var ds;\r\n        for (var i = 0, size = relays.length; i < size; i++) {\r\n            var rly = relays[i];\r\n            if (!min || minDistance > (ds = rly.path.length)) {\r\n                min = rly;\r\n                minDistance = ds;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param lines assume each string is along the X-axis and the array of lines are along the Z-axis, 1x1 is the top-left corner\r\n     */\r\n    function diagramToJunctionRelays(y, lines) {\r\n        assert(lines && lines.length > 0, \"atleast 1 line required\");\r\n        var rlys = [];\r\n        var jncs = [];\r\n        var mapLines = lines.map(function (ln) { return ln.split(\"\"); }); // [z][x]\r\n        var zCount = mapLines.length;\r\n        var xCount = mapLines[0].length;\r\n        ForEachUtil.forEach2d(mapLines, function (ch, z, x, chs) {\r\n            assert(chs.length === xCount, \"all lines must be equal length\");\r\n            if (isJunction(ch, z, x, chs)) {\r\n                jncs.push(newJunction(x, y, z, mapLines));\r\n            }\r\n        });\r\n        var takenJncConns = [];\r\n        jncs.forEach(function (jn) {\r\n            var _a = jn.location, x = _a.x, z = _a.z;\r\n            var jncRelays = walkConnections(x, z, xCount, zCount, mapLines, takenJncConns);\r\n            Array.prototype.push.apply(rlys, jncRelays);\r\n        });\r\n        return {\r\n            junctions: jncs,\r\n            relays: rlys,\r\n            size: { width: xCount, height: zCount }\r\n        };\r\n    }\r\n    PowerRelay.diagramToJunctionRelays = diagramToJunctionRelays;\r\n    function isJunction(ch, z, x, lines) {\r\n        return ch === \"+\";\r\n    }\r\n    function newJunction(x, y, z, ary) {\r\n        var jnc = {\r\n            junctionId: null,\r\n            location: { x: x, y: y, z: z }\r\n        };\r\n        jnc.junctionId = Junction.getJunctionId(jnc);\r\n        return jnc;\r\n    }\r\n    /** given a junction, start looking down each path */\r\n    function walkConnections(x, z, xCount, zCount, board, jncConnsUsed) {\r\n        // TODO keep track of already used junction connections and don't re-walk them\r\n        for (var i = 0, size = jncConnsUsed.length; i < size; i++) {\r\n            var jnc = jncConnsUsed[i];\r\n            if (jnc.x === x && jnc.z === z) {\r\n                return;\r\n            }\r\n        }\r\n        jncConnsUsed.push({ x: x, z: z });\r\n        function toRelay(jncPath) {\r\n            var relay = {\r\n                relayId: null,\r\n                powerRating: PowerRating.getPowerRating(),\r\n                path: jncPath.points.map(function (p) { return ({ x: p.x, y: 0, z: p.z }); }),\r\n                srcJunctionId: Junction.getJunctionId({ location: { x: x, y: 0, z: z } }),\r\n                dstJunctionId: Junction.getJunctionId({ location: jncPath.junction }),\r\n            };\r\n            relay.relayId = Relay.getRelayId(relay);\r\n            return relay;\r\n        }\r\n        var xOrig = x;\r\n        var zOrig = z;\r\n        var relays = [];\r\n        function createRelayPath(x, z) {\r\n            if (board[z][x] !== \" \") {\r\n                var path = walkToJunction(x, z, xCount, zCount, board, '+', xOrig, zOrig, true);\r\n                relays.push(toRelay(path));\r\n            }\r\n        }\r\n        ForEachUtil.forEachDirection(x, z, xCount, zCount, {\r\n            top: createRelayPath,\r\n            topRight: createRelayPath,\r\n            right: createRelayPath,\r\n            bottomRight: createRelayPath,\r\n            bottom: createRelayPath,\r\n            bottomLeft: createRelayPath,\r\n            left: createRelayPath,\r\n            topLeft: createRelayPath,\r\n        });\r\n        return relays;\r\n    }\r\n    /** given a starting point on a path, walk to the end\r\n     * @return the path, including the ending junction, the points along the path, and the direction\r\n     */\r\n    function walkToJunction(x, z, xCount, zCount, board, endChar, xStartJunc, zStartJunc, ignorePointsBehind) {\r\n        // initialize with the current point\r\n        var dst = [{ x: x, z: z, }];\r\n        var xPrev = xStartJunc;\r\n        var zPrev = zStartJunc;\r\n        do {\r\n            var dstLen = dst.length;\r\n            // TODO more than 1 next step may be added to 'dst'\r\n            var res = nextStepPaths(x, z, xCount, zCount, board, endChar, xPrev, zPrev, true, dst);\r\n            if (dstLen === (dstLen = dst.length)) {\r\n                // dead-end, no next step found\r\n                break;\r\n            }\r\n            xPrev = x;\r\n            zPrev = z;\r\n            x = dst[dstLen - 1].x;\r\n            z = dst[dstLen - 1].z;\r\n        } while (res == null && x > -1 && z > -1 && x < xCount && z < zCount);\r\n        if (res == null) {\r\n            throw new Error(\"no valid next step found moving from [x=\" + xPrev + \",z=\" + zPrev + \"] through [x=\" + x + \",z=\" + z + \"]\");\r\n        }\r\n        // TODO res may be null\r\n        return {\r\n            connectionDirection: { x: xStartJunc - x, y: 0, z: zStartJunc - z },\r\n            junction: { x: res.x, y: 0, z: res.z },\r\n            points: dst,\r\n        };\r\n    }\r\n    /** Check for valid next steps along the path and push the x,z pairs into 'dst'\r\n     * @return whether endChar was found\r\n     */\r\n    function nextStepPaths(x, z, xCount, zCount, board, endChar, xPrev, zPrev, ignorePointsBehind, dst) {\r\n        function checkAdjacent(expect, expect2, expect3, xx, zz, notExpect) {\r\n            if (xx === xPrev && zz === zPrev) {\r\n                return null;\r\n            }\r\n            var ch = board[zz][xx];\r\n            if (ch === expect || ch === expect2 || ch === expect3) {\r\n                dst.push({ x: xx, z: zz });\r\n            }\r\n            else if (notExpect === ch) { }\r\n            else if (ch === endChar) {\r\n                return { x: xx, z: zz };\r\n            }\r\n            return null;\r\n        }\r\n        var res = ForEachUtil.forEachDirection(x, z, xCount, zCount, {\r\n            top: function (x, z) { return checkAdjacent('|', '/', '\\\\', x, z, '-'); },\r\n            topRight: function (x, z) { return checkAdjacent('/', '|', '-', x, z, '\\\\'); },\r\n            right: function (x, z) { return checkAdjacent('-', '/', '\\\\', x, z, '|'); },\r\n            bottomRight: function (x, z) { return checkAdjacent('\\\\', '|', '-', x, z, '/'); },\r\n            bottom: function (x, z) { return checkAdjacent('|', '/', '\\\\', x, z, '-'); },\r\n            bottomLeft: function (x, z) { return checkAdjacent('/', '|', '-', x, z, '\\\\'); },\r\n            left: function (x, z) { return checkAdjacent('-', '/', '\\\\', x, z, '|'); },\r\n            topLeft: function (x, z) { return checkAdjacent('\\\\', '|', '-', x, z, '//'); },\r\n        }, ignorePointsBehind, xPrev, zPrev);\r\n        return res;\r\n    }\r\n    function invalidSymbolAt(x, z, ary, expected) {\r\n        return new Error(\"invalid symbol '\" + ary[z][x] + \"' at x=\" + x + \", z=\" + z + (expected ? \", '\" + expected : \"'\"));\r\n    }\r\n    PowerRelay.invalidSymbolAt = invalidSymbolAt;\r\n})(PowerRelay || (PowerRelay = {}));\r\nmodule.exports = PowerRelay;\r\n"
  ]
}